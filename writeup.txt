In this solution, for Would Play Prediction, I implemented a BPR predictor through Tensorflow, and for all the (user, game) pairs that were being predicted, I created a ranking of all the games for each particular user predicting how likely they would be to play it. From here, I knew that the test data was set up in a way such that for each user, half would be games they have not played and half would be games that they have played. Using this info, I sorted the games for each user based on ranking and assigned the top half with the highest BPR output value a prediction of 1, and the rest with 0. I also handled cold starts of users using popularity, and cold starts of games by just setting it to 0, as it was likely that if a game had not been seen before, it would not be too popular. For the time played part, I did not implement a LFM, but instead implemented a basic model that tunes alpha and beta values, and stops early when the values converge, and then predicts based on these biases. 